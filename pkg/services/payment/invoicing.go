package payment

import (
	"context"
	"github.com/google/uuid"
	"github.com/pkg/errors"
	"sync"
)

type InvoicingService struct {
	mutex    *sync.RWMutex
	invoices map[string]*Invoice
}

func NewInvoicingService() *InvoicingService {
	return &InvoicingService{invoices: make(map[string]*Invoice), mutex: &sync.RWMutex{}}
}

func (s *InvoicingService) Create(ctx context.Context, invoice Invoice) (*Invoice, error) {
	if invoice.ID != "" {
		return nil, errors.Errorf("id will be generated by the provider")
	}

	if invoice.Currency == "rub" {
		return nil, errors.Errorf("sorry, currency '%s' is forbidden", invoice.Currency)
	}

	if invoice.Amount < 1 {
		return nil, errors.Errorf("can not create an invoce with amount less that 1")
	}

	s.mutex.Lock()
	defer s.mutex.Unlock()

	invoice.ID = uuid.New().String()
	s.invoices[invoice.ID] = &invoice

	return &invoice, nil
}

func (s *InvoicingService) Cancel(ctx context.Context, id string) error {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	_, exists := s.invoices[id]

	if !exists {
		return errors.New("invoice does not exist")
	}

	delete(s.invoices, id)

	return nil
}

func (s InvoicingService) Get(ctx context.Context, id string) (*Invoice, error) {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	invoice, exists := s.invoices[id]

	if !exists {
		return nil, nil
	}

	return invoice, nil
}

type Invoice struct {
	ID         string
	Amount     float32
	Currency   string
	Email      string
	CustomerID string
}
